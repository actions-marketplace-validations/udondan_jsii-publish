#!/bin/bash

# All env vars that can be passed in, are handled in two variants
# FOO which can be passed in by the user when running locally
# INPUT_FOO, which is the prefixed version passed in by GitHub actions

set -euo pipefail
IFS=$'\n\t'

export TERM=xterm
yellow=$(tput setaf 003)
normal=$(tput sgr0)

print() {
    echo "${yellow}$1${normal}"
}

begin() {
    print "📦 Publishing $1 package..."
}

error() {
    print "❌ $*"
    exit 1
}

complete() {
    print "✅ Done"
}

# shellcheck disable=SC1090
source <(cat /scripts/publish/*)

# Update the version if it was passed
VERSION="${VERSION:-${INPUT_VERSION:-}}"
if [[ -n "${VERSION}" ]]; then
    print "Updating package version to $VERSION..."
    npm version "${VERSION}" --allow-same-version --no-git-tag-version
fi

BUILD_SOURCE=$(echo "${BUILD_SOURCE:-${INPUT_BUILD_SOURCE:-}}" | tr "[:upper:]" "[:lower:]")
if [[ "${BUILD_SOURCE}" == "true" || "${BUILD_SOURCE}" == "yes" ]]; then
    print "Installing dependencies..."
    npm install

    print "Building source..."
    npm run build
fi

BUILD_PACKAGES=$(echo "${BUILD_PACKAGES:-${INPUT_BUILD_PACKAGES:-}}" | tr "[:upper:]" "[:lower:]")
if [[ "${BUILD_PACKAGES}" == "true" || "${BUILD_PACKAGES}" == "yes" ]]; then
    print "Building packages..."
    rm -rf dist/*
    npm run package
fi

# Publish to npm if token is present
NPM_TOKEN="${NPM_TOKEN:-${INPUT_NPM_TOKEN:-}}"
[ -n "${NPM_TOKEN}" ] && publish_to_npm dist/js/*

# Publish to PyPI if token is present
PYPI_TOKEN="${PYPI_TOKEN:-${INPUT_PYPI_TOKEN:-}}"
[ -n "${PYPI_TOKEN}" ] && publish_to_pypi dist/python/*

# Publish to NuGet if token is present
NUGET_TOKEN="${NUGET_TOKEN:-${INPUT_NUGET_TOKEN:-}}"
[ -n "${NUGET_TOKEN}" ] && publish_to_nuget dist/dotnet/*.nupkg

# Publish to Maven if username is present
GITHUB_TOKEN="${GITHUB_TOKEN:-${INPUT_GITHUB_TOKEN:-}}"
[ -n "${GITHUB_TOKEN}" ] && publish_to_maven "$(find . -name "*.pom")"

exit 0
