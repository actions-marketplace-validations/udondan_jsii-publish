#!/bin/bash

# All env vars that can be passed in, are handled in two variants
# FOO which can be passed in by the user when running locally
# INPUT_FOO, which is the prefixed version passed in by GitHub actions

set -euo pipefail
IFS=$'\n\t'

export TERM=xterm
yellow=$(tput setaf 003)
normal=$(tput sgr0)

print() {
    echo "${yellow}$1${normal}"
}

# Update the version if it was passed
export VERSION="${VERSION:-${INPUT_VERSION:-}}"
if [[ -n "${VERSION}" ]]; then
    print "Updating package version to $VERSION..."
    npm version "${VERSION}" --allow-same-version --no-git-tag-version
fi

BUILD=$(echo "${BUILD:-${INPUT_BUILD:-}}" | tr "[:upper:]" "[:lower:]")

if [[ "${BUILD}" == "true" || "${BUILD}" == "yes" ]]; then
    print "Installing dependencies..."
    npm install

    print "Building source..."
    npm run build

    print "Building packages..."
    rm -rf dist/*
    npm run package
fi


# Publish to npm if token is present
export NPM_TOKEN="${NPM_TOKEN:-${INPUT_NPM_TOKEN:-}}"
if [[ -n "${NPM_TOKEN}" ]]; then
    print "Publishing npm package..."
    # shellcheck disable=SC2016
    echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > ~/.npmrc
    npm publish dist/js/*
fi

# Publish to PyPI if token is present
export PYPI_TOKEN="${PYPI_TOKEN:-${INPUT_PYPI_TOKEN:-}}"
if [[ -n "${PYPI_TOKEN}" ]]; then
    print "Publishing PyPI package..."
    cat <<EOF > ~/.pypirc
[pypi]
username = __token__
password = ${PYPI_TOKEN}
EOF
    twine upload dist/python/*
fi

# Publish to NuGet if token is present
export NUGET_TOKEN="${NUGET_TOKEN:-${INPUT_NUGET_TOKEN:-}}"
if [[ -n "${NUGET_TOKEN}" ]]; then
    print "Publishing NuGET package..."
    dotnet nuget push dist/dotnet/*.nupkg -k "${NUGET_TOKEN}" -s https://api.nuget.org/v3/index.json --skip-duplicate
fi
